apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.github.adbautoswitcher"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("../keystore.jks")
            storePassword "frunoman"
            keyAlias "noymankey"
            keyPassword "papamama"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug{
            signingConfig signingConfigs.debug
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
}


tasks.register('installSystemApp', InstallSystemApp) {
    group = 'Allure'
    description = 'Install app as system'
}

tasks.register('uninstallSystemApp', UninstallSystemApp) {
    group = 'Allure'
    description = 'Install app as system'
}


class UninstallSystemApp extends DefaultTask {
    def adbRoot = ['adb', 'root']
    def adbReboot = ['adb', 'reboot']
    def adbRemount = ['adb', 'remount']
    def adbDeleteApp = ['adb', 'shell', 'rm','-rf', '/system/app/app-debug.apk']


    @TaskAction
    def exec() {
        def result = adbRoot.execute().text
        println(result)
        result =  adbRemount.execute().text
        println(result)
        result =  adbDeleteApp.execute().text
        println(result)
    }
}

class InstallSystemApp extends DefaultTask {
    def appDebug = System.getProperty("user.dir") +
            File.separator + "app" +
            File.separator + "build" +
            File.separator + "outputs" +
            File.separator + "apk" +
            File.separator + "debug" +
            File.separator + "app-debug.apk"

    def adbRoot = ['adb', 'root']
    def adbReboot = ['adb', 'reboot']
    def adbDisableVerity = ['adb', 'disable-verity']
    def adbRemount = ['adb', 'remount']
    def adbPush = ['adb', 'push', appDebug, '/system/app']
    def adbWaitForDevice = ['adb','wait-for-device']

    @TaskAction
    def exec() {
        println(appDebug)
        def result = adbRoot.execute().text
        println(result)
        result = adbDisableVerity.execute().text
        println(result)
        result =  adbReboot.execute().text
        println(result)
        result = adbWaitForDevice.execute().text
        println(result)
        result = adbRoot.execute().text
        println(result)
        result =  adbRemount.execute().text
        println(result)
        result =  adbPush.execute().text
        println(result)
        result =  adbReboot.execute().text
        println(result)
        result = adbWaitForDevice.execute().text
        println(result)
    }
}
